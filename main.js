/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BetterHighlightPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/types.ts
var DEFAULT_SETTINGS = {
  colors: [
    {
      id: "yellow",
      name: "yellow",
      displayName: "Yellow",
      color: "#ffeb3b",
      enabled: true
    },
    {
      id: "blue",
      name: "blue",
      displayName: "Blue",
      color: "#2196f3",
      enabled: true
    },
    {
      id: "green",
      name: "green",
      displayName: "Green",
      color: "#4caf50",
      enabled: true
    },
    {
      id: "red",
      name: "red",
      displayName: "Red",
      color: "#f44336",
      enabled: true
    },
    {
      id: "purple",
      name: "purple",
      displayName: "Purple",
      color: "#9c27b0",
      enabled: true
    }
  ]
};

// src/i18n.ts
var ja = {
  // Plugin messages
  pluginLoaded: "Better Highlight Plugin \u304C\u8AAD\u307F\u8FBC\u307E\u308C\u307E\u3057\u305F\uFF01",
  pluginWorking: "Better Highlight Plugin \u306F\u6B63\u5E38\u306B\u52D5\u4F5C\u3057\u3066\u3044\u307E\u3059\uFF01",
  // Highlight actions
  highlightRemoved: "\u30CF\u30A4\u30E9\u30A4\u30C8\u3092\u524A\u9664\u3057\u307E\u3057\u305F",
  highlightRemovedCount: "\u30CF\u30A4\u30E9\u30A4\u30C8\u3092\u524A\u9664\u3057\u307E\u3057\u305F ({count}\u500B)",
  customHighlightRemoved: "\u30AB\u30B9\u30BF\u30E0\u30CF\u30A4\u30E9\u30A4\u30C8\u3092\u524A\u9664\u3057\u307E\u3057\u305F",
  noHighlightFound: "\u9078\u629E\u7BC4\u56F2\u306B\u30CF\u30A4\u30E9\u30A4\u30C8\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3067\u3057\u305F",
  noHighlightAtCursor: "\u30AB\u30FC\u30BD\u30EB\u4F4D\u7F6E\u306B\u30CF\u30A4\u30E9\u30A4\u30C8\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3067\u3057\u305F",
  // Settings UI
  settingsTitle: "Better Highlight Settings",
  addColorButton: "+ \u8272\u3092\u8FFD\u52A0",
  addColorDesc: "\u30AB\u30B9\u30BF\u30E0\u30CF\u30A4\u30E9\u30A4\u30C8\u8272\u3092\u8FFD\u52A0\u3057\u307E\u3059",
  usageTitle: "\u4F7F\u7528\u65B9\u6CD5\uFF1A",
  usageCustom: "\u30AB\u30B9\u30BF\u30E0\u30CF\u30A4\u30E9\u30A4\u30C8\uFF1A<code>==(colorname)\u30C6\u30AD\u30B9\u30C8==</code>",
  usageNormal: "\u901A\u5E38\u306E\u30CF\u30A4\u30E9\u30A4\u30C8\uFF1A<code>==\u30C6\u30AD\u30B9\u30C8==</code>",
  hotkeyTitle: "\u30DB\u30C3\u30C8\u30AD\u30FC\uFF1A",
  hotkeyDesc: '\u8A2D\u5B9A \u2192 \u30DB\u30C3\u30C8\u30AD\u30FC \u2192 "Better Highlight" \u3067\u5404\u8272\u306E\u30B7\u30E7\u30FC\u30C8\u30AB\u30C3\u30C8\u3092\u8A2D\u5B9A\u3067\u304D\u307E\u3059',
  // Color settings
  enabledLabel: "\u6709\u52B9",
  enabledDesc: "\u3053\u306E\u8272\u3092\u4F7F\u7528\u53EF\u80FD\u306B\u3059\u308B",
  colorNameLabel: "\u8272\u540D",
  colorNameDesc: "==(colorname)text== \u3067\u4F7F\u7528\u3059\u308B\u540D\u524D",
  displayNameLabel: "\u8868\u793A\u540D",
  displayNameDesc: "\u8A2D\u5B9A\u753B\u9762\u3067\u8868\u793A\u3055\u308C\u308B\u540D\u524D",
  colorPickerLabel: "\u30CF\u30A4\u30E9\u30A4\u30C8\u8272",
  colorPickerDesc: "\u30CF\u30A4\u30E9\u30A4\u30C8\u306E\u80CC\u666F\u8272\u3092\u9078\u629E",
  deleteColorTooltip: "\u3053\u306E\u8272\u3092\u524A\u9664",
  previewText: "\u30B5\u30F3\u30D7\u30EB\u30C6\u30AD\u30B9\u30C8",
  // Commands
  createDefaultHighlight: "\u30C7\u30D5\u30A9\u30EB\u30C8\u30CF\u30A4\u30E9\u30A4\u30C8\u3092\u4F5C\u6210",
  removeHighlight: "\u30CF\u30A4\u30E9\u30A4\u30C8\u3092\u524A\u9664",
  createColorHighlight: "{color}\u30CF\u30A4\u30E9\u30A4\u30C8\u3092\u4F5C\u6210",
  // Settings UI new
  documentation: "\u30C9\u30AD\u30E5\u30E1\u30F3\u30C8",
  documentationDesc: "\u5B8C\u5168\u306A\u30C9\u30AD\u30E5\u30E1\u30F3\u30C8\u3068\u4F7F\u7528\u4F8B\u3092\u8868\u793A",
  openReadme: "README\u3092\u958B\u304F",
  colorsSection: "\u8272",
  enableHighlight: "\u30CF\u30A4\u30E9\u30A4\u30C8\u3092\u6709\u52B9\u306B\u3059\u308B",
  enableHighlightDesc: "{color}\u30CF\u30A4\u30E9\u30A4\u30C8\u3092\u6709\u52B9\u307E\u305F\u306F\u7121\u52B9\u306B\u3057\u307E\u3059\u3002",
  colorName: "\u8272\u540D",
  colorNameDescNew: 'Markdown\u30B7\u30F3\u30BF\u30C3\u30AF\u30B9\u3067\u4F7F\u7528\u3055\u308C\u308B\u8B58\u5225\u5B50 (\u4F8B: "blue" \u3067 ==(blue)\u30C6\u30AD\u30B9\u30C8==)',
  displayName: "\u8868\u793A\u540D",
  displayNameDescNew: "\u30B3\u30DE\u30F3\u30C9\u3068UI\u3067\u8868\u793A\u3055\u308C\u308B\u540D\u524D",
  color: "\u8272",
  colorDescNew: "\u30AB\u30E9\u30FC\u30B5\u30FC\u30AF\u30EB\u3092\u30AF\u30EA\u30C3\u30AF\u3057\u3066\u30CF\u30A4\u30E9\u30A4\u30C8\u8272\u3092\u5909\u66F4\u3057\u307E\u3059\u3002",
  remove: "\u524A\u9664",
  removeConfirm: '\u672C\u5F53\u306B "{colorName}" \u8272\u3092\u524A\u9664\u3057\u307E\u3059\u304B\uFF1F\u3053\u306E\u64CD\u4F5C\u306F\u5143\u306B\u623B\u305B\u307E\u305B\u3093\u3002',
  supportSection: "\u30B5\u30DD\u30FC\u30C8",
  buyMeACoffee: "Buy me a coffee",
  buyMeACoffeeDesc: "\u3053\u306E\u30D7\u30E9\u30B0\u30A4\u30F3\u3092\u6C17\u306B\u5165\u3063\u3066\u3044\u305F\u3060\u3051\u307E\u3057\u305F\u3089\u3001\u958B\u767A\u8005\u306B\u30B3\u30FC\u30D2\u30FC\u3092\u4E00\u676F\u304A\u3054\u3063\u3066\u3044\u305F\u3060\u3051\u308B\u3068\u5B09\u3057\u3044\u3067\u3059\u2615"
};
var en = {
  // Plugin messages
  pluginLoaded: "Better Highlight Plugin loaded successfully!",
  pluginWorking: "Better Highlight Plugin is working properly!",
  // Highlight actions
  highlightRemoved: "Highlight removed",
  highlightRemovedCount: "Highlights removed ({count} items)",
  customHighlightRemoved: "Custom highlight removed",
  noHighlightFound: "No highlights found in selection",
  noHighlightAtCursor: "No highlight found at cursor position",
  // Settings UI
  settingsTitle: "Better Highlight Settings",
  addColorButton: "+ Add Color",
  addColorDesc: "Add a custom highlight color",
  usageTitle: "Usage:",
  usageCustom: "Custom highlight: <code>==(colorname)text==</code>",
  usageNormal: "Normal highlight: <code>==text==</code>",
  hotkeyTitle: "Hotkeys:",
  hotkeyDesc: 'Go to Settings \u2192 Hotkeys \u2192 "Better Highlight" to set shortcuts for each color',
  // Color settings
  enabledLabel: "Enabled",
  enabledDesc: "Enable this color for use",
  colorNameLabel: "Color Name",
  colorNameDesc: "Name used in ==(colorname)text== syntax",
  displayNameLabel: "Display Name",
  displayNameDesc: "Name shown in settings",
  colorPickerLabel: "Highlight Color",
  colorPickerDesc: "Select the background color for highlighting",
  deleteColorTooltip: "Delete this color",
  previewText: "Sample Text",
  // Commands
  createDefaultHighlight: "Create Default Highlight",
  removeHighlight: "Remove Highlight",
  createColorHighlight: "Create {color} Highlight",
  // Settings UI new
  documentation: "Documentation",
  documentationDesc: "Display complete documentation and usage examples",
  openReadme: "Open README",
  colorsSection: "Colors",
  enableHighlight: "Enable Highlight",
  enableHighlightDesc: "Enable or disable {color} highlight",
  colorName: "Color Name",
  colorNameDescNew: 'Identifier used in Markdown syntax (e.g., "blue" for ==(blue)text==)',
  displayName: "Display Name",
  displayNameDescNew: "Name shown in command and UI",
  color: "Color",
  colorDescNew: "Click the color circle to change the highlight color",
  remove: "Remove",
  removeConfirm: 'Are you sure you want to remove "{colorName}"? This operation cannot be undone.',
  supportSection: "Support",
  buyMeACoffee: "Buy me a coffee",
  buyMeACoffeeDesc: "Enjoying this plugin? I would really appreciate it if you could buy me a coffee to fuel future development! \u2615"
};
var zhCN = {
  // Plugin messages
  pluginLoaded: "Better Highlight \u63D2\u4EF6\u52A0\u8F7D\u6210\u529F\uFF01",
  pluginWorking: "Better Highlight \u63D2\u4EF6\u8FD0\u884C\u6B63\u5E38\uFF01",
  // Highlight actions
  highlightRemoved: "\u9AD8\u4EAE\u5DF2\u5220\u9664",
  highlightRemovedCount: "\u5DF2\u5220\u9664\u9AD8\u4EAE ({count}\u4E2A)",
  customHighlightRemoved: "\u81EA\u5B9A\u4E49\u9AD8\u4EAE\u5DF2\u5220\u9664",
  noHighlightFound: "\u9009\u62E9\u8303\u56F4\u5185\u672A\u627E\u5230\u9AD8\u4EAE",
  noHighlightAtCursor: "\u5149\u6807\u4F4D\u7F6E\u672A\u627E\u5230\u9AD8\u4EAE",
  // Settings UI
  settingsTitle: "Better Highlight \u8BBE\u7F6E",
  addColorButton: "+ \u6DFB\u52A0\u989C\u8272",
  addColorDesc: "\u6DFB\u52A0\u81EA\u5B9A\u4E49\u9AD8\u4EAE\u989C\u8272",
  usageTitle: "\u4F7F\u7528\u65B9\u6CD5\uFF1A",
  usageCustom: "\u81EA\u5B9A\u4E49\u9AD8\u4EAE\uFF1A<code>==(colorname)\u6587\u672C==</code>",
  usageNormal: "\u666E\u901A\u9AD8\u4EAE\uFF1A<code>==\u6587\u672C==</code>",
  hotkeyTitle: "\u5FEB\u6377\u952E\uFF1A",
  hotkeyDesc: '\u524D\u5F80 \u8BBE\u7F6E \u2192 \u5FEB\u6377\u952E \u2192 "Better Highlight" \u8BBE\u7F6E\u5404\u989C\u8272\u7684\u5FEB\u6377\u952E',
  // Color settings
  enabledLabel: "\u542F\u7528",
  enabledDesc: "\u542F\u7528\u6B64\u989C\u8272",
  colorNameLabel: "\u989C\u8272\u540D\u79F0",
  colorNameDesc: "\u5728 ==(colorname)text== \u8BED\u6CD5\u4E2D\u4F7F\u7528\u7684\u540D\u79F0",
  displayNameLabel: "\u663E\u793A\u540D\u79F0",
  displayNameDesc: "\u5728\u8BBE\u7F6E\u4E2D\u663E\u793A\u7684\u540D\u79F0",
  colorPickerLabel: "\u9AD8\u4EAE\u989C\u8272",
  colorPickerDesc: "\u9009\u62E9\u9AD8\u4EAE\u7684\u80CC\u666F\u989C\u8272",
  deleteColorTooltip: "\u5220\u9664\u6B64\u989C\u8272",
  previewText: "\u793A\u4F8B\u6587\u672C",
  // Commands
  createDefaultHighlight: "\u521B\u5EFA\u9ED8\u8BA4\u9AD8\u4EAE",
  removeHighlight: "\u5220\u9664\u9AD8\u4EAE",
  createColorHighlight: "\u521B\u5EFA{color}\u9AD8\u4EAE",
  // Settings UI new
  documentation: "\u6587\u6863",
  documentationDesc: "\u663E\u793A\u5B8C\u6574\u7684\u6587\u6863\u548C\u4F7F\u7528\u793A\u4F8B",
  openReadme: "\u6253\u5F00README",
  colorsSection: "\u989C\u8272",
  enableHighlight: "\u542F\u7528\u9AD8\u4EAE",
  enableHighlightDesc: "\u542F\u7528\u6216\u7981\u7528{color}\u9AD8\u4EAE",
  colorName: "\u989C\u8272\u540D\u79F0",
  colorNameDescNew: '\u5728Markdown\u8BED\u6CD5\u4E2D\u4F7F\u7528\u7684\u6807\u8BC6\u7B26\uFF08\u4F8B\u5982\uFF1A"blue"\u7528\u4E8E==(blue)text==)',
  displayName: "\u663E\u793A\u540D\u79F0",
  displayNameDescNew: "\u5728\u547D\u4EE4\u548CUI\u4E2D\u663E\u793A\u7684\u540D\u79F0",
  color: "\u989C\u8272",
  colorDescNew: "\u70B9\u51FB\u989C\u8272\u5706\u5708\u4EE5\u66F4\u6539\u9AD8\u4EAE\u989C\u8272",
  remove: "\u5220\u9664",
  removeConfirm: '\u60A8\u786E\u5B9A\u8981\u5220\u9664"{colorName}"?\u6B64\u64CD\u4F5C\u65E0\u6CD5\u64A4\u6D88',
  supportSection: "\u652F\u6301",
  buyMeACoffee: "\u8BF7\u6211\u559D\u676F\u5496\u5561",
  buyMeACoffeeDesc: "\u559C\u6B22\u8FD9\u4E2A\u63D2\u4EF6\u5417\uFF1F\u5982\u679C\u53EF\u4EE5\u8BF7\u6211\u559D\u676F\u5496\u5561\u4E3A\u672A\u6765\u7684\u5F00\u53D1\u63D0\u4F9B\u52A8\u529B\uFF0C\u6211\u4F1A\u975E\u5E38\u611F\u6FC0\u7684\uFF01\u2615"
};
var zhTW = {
  // Plugin messages
  pluginLoaded: "Better Highlight \u5916\u639B\u8F09\u5165\u6210\u529F\uFF01",
  pluginWorking: "Better Highlight \u5916\u639B\u904B\u884C\u6B63\u5E38\uFF01",
  // Highlight actions
  highlightRemoved: "\u87A2\u5149\u7B46\u5DF2\u522A\u9664",
  highlightRemovedCount: "\u5DF2\u522A\u9664\u87A2\u5149\u7B46 ({count}\u500B)",
  customHighlightRemoved: "\u81EA\u8A02\u87A2\u5149\u7B46\u5DF2\u522A\u9664",
  noHighlightFound: "\u9078\u64C7\u7BC4\u570D\u5167\u672A\u627E\u5230\u87A2\u5149\u7B46",
  noHighlightAtCursor: "\u6E38\u6A19\u4F4D\u7F6E\u672A\u627E\u5230\u87A2\u5149\u7B46",
  // Settings UI
  settingsTitle: "Better Highlight \u8A2D\u5B9A",
  addColorButton: "+ \u65B0\u589E\u984F\u8272",
  addColorDesc: "\u65B0\u589E\u81EA\u8A02\u87A2\u5149\u7B46\u984F\u8272",
  usageTitle: "\u4F7F\u7528\u65B9\u6CD5\uFF1A",
  usageCustom: "\u81EA\u8A02\u87A2\u5149\u7B46\uFF1A<code>==(colorname)\u6587\u5B57==</code>",
  usageNormal: "\u666E\u901A\u87A2\u5149\u7B46\uFF1A<code>==\u6587\u5B57==</code>",
  hotkeyTitle: "\u5FEB\u901F\u9375\uFF1A",
  hotkeyDesc: '\u524D\u5F80 \u8A2D\u5B9A \u2192 \u5FEB\u901F\u9375 \u2192 "Better Highlight" \u8A2D\u5B9A\u5404\u984F\u8272\u7684\u5FEB\u901F\u9375',
  // Color settings
  enabledLabel: "\u555F\u7528",
  enabledDesc: "\u555F\u7528\u6B64\u984F\u8272",
  colorNameLabel: "\u984F\u8272\u540D\u7A31",
  colorNameDesc: "\u5728 ==(colorname)text== \u8A9E\u6CD5\u4E2D\u4F7F\u7528\u7684\u540D\u7A31",
  displayNameLabel: "\u986F\u793A\u540D\u7A31",
  displayNameDesc: "\u5728\u8A2D\u5B9A\u4E2D\u986F\u793A\u7684\u540D\u7A31",
  colorPickerLabel: "\u87A2\u5149\u7B46\u984F\u8272",
  colorPickerDesc: "\u9078\u64C7\u87A2\u5149\u7B46\u7684\u80CC\u666F\u984F\u8272",
  deleteColorTooltip: "\u522A\u9664\u6B64\u984F\u8272",
  previewText: "\u7BC4\u4F8B\u6587\u5B57",
  // Commands
  createDefaultHighlight: "\u5EFA\u7ACB\u9810\u8A2D\u87A2\u5149\u7B46",
  removeHighlight: "\u522A\u9664\u87A2\u5149\u7B46",
  createColorHighlight: "\u5EFA\u7ACB{color}\u87A2\u5149\u7B46",
  // Settings UI new
  documentation: "\u6587\u4EF6",
  documentationDesc: "\u986F\u793A\u5B8C\u6574\u7684\u6587\u4EF6\u548C\u4F7F\u7528\u793A\u4F8B",
  openReadme: "\u958B\u555FREADME",
  colorsSection: "\u984F\u8272",
  enableHighlight: "\u555F\u7528\u9AD8\u4EAE",
  enableHighlightDesc: "\u555F\u7528\u6216\u7981\u7528{color}\u9AD8\u4EAE",
  colorName: "\u984F\u8272\u540D\u7A31",
  colorNameDescNew: '\u5728Markdown\u8A9E\u6CD5\u4E2D\u4F7F\u7528\u7684\u8B58\u5225\u7B26\uFF08\u4F8B\u5982\uFF1A"blue"\u7528\u65BC==(blue)text==)',
  displayName: "\u986F\u793A\u540D\u7A31",
  displayNameDescNew: "\u5728\u547D\u4EE4\u548CUI\u4E2D\u986F\u793A\u7684\u540D\u7A31",
  color: "\u984F\u8272",
  colorDescNew: "\u9EDE\u64CA\u984F\u8272\u5713\u5708\u4EE5\u66F4\u6539\u9AD8\u4EAE\u984F\u8272",
  remove: "\u522A\u9664",
  removeConfirm: '\u60A8\u78BA\u5B9A\u8981\u522A\u9664"{colorName}"?\u6B64\u64CD\u4F5C\u7121\u6CD5\u64A4\u92B7',
  supportSection: "\u652F\u6301",
  buyMeACoffee: "\u8ACB\u6211\u559D\u676F\u5496\u5561",
  buyMeACoffeeDesc: "\u559C\u6B61\u9019\u500B\u5916\u639B\u55CE\uFF1F\u5982\u679C\u53EF\u4EE5\u8ACB\u6211\u559D\u676F\u5496\u5561\u70BA\u672A\u4F86\u7684\u958B\u767C\u63D0\u4F9B\u52D5\u529B\uFF0C\u6211\u6703\u975E\u5E38\u611F\u6FC0\u7684\uFF01\u2615"
};
var ko = {
  // Plugin messages
  pluginLoaded: "Better Highlight \uD50C\uB7EC\uADF8\uC778\uC774 \uB85C\uB4DC\uB418\uC5C8\uC2B5\uB2C8\uB2E4!",
  pluginWorking: "Better Highlight \uD50C\uB7EC\uADF8\uC778\uC774 \uC815\uC0C1\uC801\uC73C\uB85C \uC791\uB3D9\uD558\uACE0 \uC788\uC2B5\uB2C8\uB2E4!",
  // Highlight actions
  highlightRemoved: "\uD558\uC774\uB77C\uC774\uD2B8\uAC00 \uC0AD\uC81C\uB418\uC5C8\uC2B5\uB2C8\uB2E4",
  highlightRemovedCount: "\uD558\uC774\uB77C\uC774\uD2B8\uAC00 \uC0AD\uC81C\uB418\uC5C8\uC2B5\uB2C8\uB2E4 ({count}\uAC1C)",
  customHighlightRemoved: "\uC0AC\uC6A9\uC790 \uC815\uC758 \uD558\uC774\uB77C\uC774\uD2B8\uAC00 \uC0AD\uC81C\uB418\uC5C8\uC2B5\uB2C8\uB2E4",
  noHighlightFound: "\uC120\uD0DD \uBC94\uC704\uC5D0\uC11C \uD558\uC774\uB77C\uC774\uD2B8\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4",
  noHighlightAtCursor: "\uCEE4\uC11C \uC704\uCE58\uC5D0\uC11C \uD558\uC774\uB77C\uC774\uD2B8\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4",
  // Settings UI
  settingsTitle: "Better Highlight \uC124\uC815",
  addColorButton: "+ \uC0C9\uC0C1 \uCD94\uAC00",
  addColorDesc: "\uC0AC\uC6A9\uC790 \uC815\uC758 \uD558\uC774\uB77C\uC774\uD2B8 \uC0C9\uC0C1\uC744 \uCD94\uAC00\uD569\uB2C8\uB2E4",
  usageTitle: "\uC0AC\uC6A9\uBC95:",
  usageCustom: "\uC0AC\uC6A9\uC790 \uC815\uC758 \uD558\uC774\uB77C\uC774\uD2B8: <code>==(colorname)\uD14D\uC2A4\uD2B8==</code>",
  usageNormal: "\uC77C\uBC18 \uD558\uC774\uB77C\uC774\uD2B8: <code>==\uD14D\uC2A4\uD2B8==</code>",
  hotkeyTitle: "\uB2E8\uCD95\uD0A4:",
  hotkeyDesc: '\uC124\uC815 \u2192 \uB2E8\uCD95\uD0A4 \u2192 "Better Highlight"\uC5D0\uC11C \uAC01 \uC0C9\uC0C1\uC758 \uB2E8\uCD95\uD0A4\uB97C \uC124\uC815\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4',
  // Color settings
  enabledLabel: "\uD65C\uC131\uD654",
  enabledDesc: "\uC774 \uC0C9\uC0C1\uC744 \uC0AC\uC6A9 \uAC00\uB2A5\uD558\uAC8C \uD569\uB2C8\uB2E4",
  colorNameLabel: "\uC0C9\uC0C1 \uC774\uB984",
  colorNameDesc: "==(colorname)text== \uAD6C\uBB38\uC5D0\uC11C \uC0AC\uC6A9\uB418\uB294 \uC774\uB984",
  displayNameLabel: "\uD45C\uC2DC \uC774\uB984",
  displayNameDesc: "\uC124\uC815\uC5D0\uC11C \uD45C\uC2DC\uB418\uB294 \uC774\uB984",
  colorPickerLabel: "\uD558\uC774\uB77C\uC774\uD2B8 \uC0C9\uC0C1",
  colorPickerDesc: "\uD558\uC774\uB77C\uC774\uD2B8\uC758 \uBC30\uACBD \uC0C9\uC0C1\uC744 \uC120\uD0DD\uD569\uB2C8\uB2E4",
  deleteColorTooltip: "\uC774 \uC0C9\uC0C1\uC744 \uC0AD\uC81C\uD569\uB2C8\uB2E4",
  previewText: "\uC0D8\uD50C \uD14D\uC2A4\uD2B8",
  // Commands
  createDefaultHighlight: "\uAE30\uBCF8 \uD558\uC774\uB77C\uC774\uD2B8 \uC0DD\uC131",
  removeHighlight: "\uD558\uC774\uB77C\uC774\uD2B8 \uC81C\uAC70",
  createColorHighlight: "{color} \uD558\uC774\uB77C\uC774\uD2B8 \uC0DD\uC131",
  // Settings UI new
  documentation: "\uBB38\uC11C",
  documentationDesc: "\uC644\uC804\uD55C \uBB38\uC11C\uC640 \uC0AC\uC6A9 \uC608\uC81C\uB97C \uD45C\uC2DC",
  openReadme: "README \uC5F4\uAE30",
  colorsSection: "\uC0C9\uC0C1",
  enableHighlight: "\uD558\uC774\uB77C\uC774\uD2B8 \uD65C\uC131\uD654",
  enableHighlightDesc: "{color} \uD558\uC774\uB77C\uC774\uD2B8\uB97C \uD65C\uC131\uD654 \uB610\uB294 \uBE44\uD65C\uC131\uD654",
  colorName: "\uC0C9\uC0C1 \uC774\uB984",
  colorNameDescNew: 'Markdown \uAD6C\uBB38\uC5D0\uC11C \uC0AC\uC6A9\uB418\uB294 \uC2DD\uBCC4\uC790 (\uC608: "blue"\uB294 ==(blue)\uD14D\uC2A4\uD2B8==)',
  displayName: "\uD45C\uC2DC \uC774\uB984",
  displayNameDescNew: "\uBA85\uB839\uC5B4\uC640 UI\uC5D0\uC11C \uD45C\uC2DC\uB418\uB294 \uC774\uB984",
  color: "\uC0C9\uC0C1",
  colorDescNew: "\uC0C9\uC0C1 \uC6D0\uC744 \uD074\uB9AD\uD558\uC5EC \uD558\uC774\uB77C\uC774\uD2B8 \uC0C9\uC0C1\uC744 \uBCC0\uACBD",
  remove: "\uC81C\uAC70",
  removeConfirm: '"{colorName}"\uC744 \uC815\uB9D0\uB85C \uC81C\uAC70\uD558\uC2DC\uACA0\uC2B5\uB2C8\uAE4C? \uC774 \uC791\uC5C5\uC740 \uB418\uB3CC\uB9B4 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.',
  supportSection: "\uC9C0\uC6D0",
  buyMeACoffee: "\uCEE4\uD53C \uC0AC\uC8FC\uAE30",
  buyMeACoffeeDesc: "\uC774 \uD50C\uB7EC\uADF8\uC778\uC774 \uB9C8\uC74C\uC5D0 \uB4DC\uC2DC\uB098\uC694? \uC55E\uC73C\uB85C\uC758 \uAC1C\uBC1C\uC5D0 \uD798\uC774 \uB420 \uC218 \uC788\uB3C4\uB85D \uCEE4\uD53C \uD55C \uC794 \uC0AC\uC8FC\uC2DC\uBA74 \uC815\uB9D0 \uAC10\uC0AC\uD558\uACA0\uC2B5\uB2C8\uB2E4! \u2615"
};
var de = {
  // Plugin messages
  pluginLoaded: "Better Highlight Plugin erfolgreich geladen!",
  pluginWorking: "Better Highlight Plugin funktioniert ordnungsgem\xE4\xDF!",
  // Highlight actions
  highlightRemoved: "Markierung entfernt",
  highlightRemovedCount: "Markierungen entfernt ({count} Elemente)",
  customHighlightRemoved: "Benutzerdefinierte Markierung entfernt",
  noHighlightFound: "Keine Markierungen in der Auswahl gefunden",
  noHighlightAtCursor: "Keine Markierung an der Cursor-Position gefunden",
  // Settings UI
  settingsTitle: "Better Highlight Einstellungen",
  addColorButton: "+ Farbe hinzuf\xFCgen",
  addColorDesc: "Eine benutzerdefinierte Markierungsfarbe hinzuf\xFCgen",
  usageTitle: "Verwendung:",
  usageCustom: "Benutzerdefinierte Markierung: <code>==(colorname)text==</code>",
  usageNormal: "Normale Markierung: <code>==text==</code>",
  hotkeyTitle: "Tastenk\xFCrzel:",
  hotkeyDesc: 'Gehen Sie zu Einstellungen \u2192 Tastenk\xFCrzel \u2192 "Better Highlight", um Tastenk\xFCrzel f\xFCr jede Farbe zu setzen',
  // Color settings
  enabledLabel: "Aktiviert",
  enabledDesc: "Diese Farbe zur Verwendung aktivieren",
  colorNameLabel: "Farbname",
  colorNameDesc: "Name, der in der ==(colorname)text== Syntax verwendet wird",
  displayNameLabel: "Anzeigename",
  displayNameDesc: "In den Einstellungen angezeigter Name",
  colorPickerLabel: "Markierungsfarbe",
  colorPickerDesc: "Hintergrundfarbe f\xFCr die Markierung ausw\xE4hlen",
  deleteColorTooltip: "Diese Farbe l\xF6schen",
  previewText: "Beispieltext",
  // Commands
  createDefaultHighlight: "Standard-Markierung erstellen",
  removeHighlight: "Markierung entfernen",
  createColorHighlight: "{color} Markierung erstellen",
  // Settings UI new
  documentation: "Dokumentation",
  documentationDesc: "Vollst\xE4ndige Dokumentation und Verwendungsbeispiele anzeigen",
  openReadme: "README \xF6ffnen",
  colorsSection: "Farben",
  enableHighlight: "Hervorhebung aktivieren",
  enableHighlightDesc: "{color} Hervorhebung aktivieren oder deaktivieren",
  colorName: "Farbname",
  colorNameDescNew: 'Bezeichner, der in der Markdown-Syntax verwendet wird (z.B. "blue" f\xFCr ==(blue)text==)',
  displayName: "Anzeigename",
  displayNameDescNew: "Name, der in Befehlen und der Benutzeroberfl\xE4che angezeigt wird",
  color: "Farbe",
  colorDescNew: "Klicken Sie auf die Farbkreise, um die Hervorhebungsfarbe zu \xE4ndern",
  remove: "Entfernen",
  removeConfirm: 'Sind Sie sicher, dass Sie "{colorName}" entfernen m\xF6chten? Diese Aktion kann nicht r\xFCckg\xE4ngig gemacht werden.',
  supportSection: "Unterst\xFCtzung",
  buyMeACoffee: "Buy me a coffee",
  buyMeACoffeeDesc: "Gef\xE4llt Ihnen dieses Plugin? Ich w\xFCrde mich sehr freuen, wenn Sie mir einen Kaffee spendieren k\xF6nnten, um die zuk\xFCnftige Entwicklung zu unterst\xFCtzen! \u2615"
};
var fr = {
  // Plugin messages
  pluginLoaded: "Plugin Better Highlight charg\xE9 avec succ\xE8s !",
  pluginWorking: "Le plugin Better Highlight fonctionne correctement !",
  // Highlight actions
  highlightRemoved: "Surlignage supprim\xE9",
  highlightRemovedCount: "Surlignages supprim\xE9s ({count} \xE9l\xE9ments)",
  customHighlightRemoved: "Surlignage personnalis\xE9 supprim\xE9",
  noHighlightFound: "Aucun surlignage trouv\xE9 dans la s\xE9lection",
  noHighlightAtCursor: "Aucun surlignage trouv\xE9 \xE0 la position du curseur",
  // Settings UI
  settingsTitle: "Param\xE8tres Better Highlight",
  addColorButton: "+ Ajouter une couleur",
  addColorDesc: "Ajouter une couleur de surlignage personnalis\xE9e",
  usageTitle: "Utilisation :",
  usageCustom: "Surlignage personnalis\xE9 : <code>==(colorname)texte==</code>",
  usageNormal: "Surlignage normal : <code>==texte==</code>",
  hotkeyTitle: "Raccourcis clavier :",
  hotkeyDesc: 'Allez dans Param\xE8tres \u2192 Raccourcis clavier \u2192 "Better Highlight" pour d\xE9finir des raccourcis pour chaque couleur',
  // Color settings
  enabledLabel: "Activ\xE9",
  enabledDesc: "Activer cette couleur pour utilisation",
  colorNameLabel: "Nom de la couleur",
  colorNameDesc: "Nom utilis\xE9 dans la syntaxe ==(colorname)text==",
  displayNameLabel: "Nom d'affichage",
  displayNameDesc: "Nom affich\xE9 dans les param\xE8tres",
  colorPickerLabel: "Couleur de surlignage",
  colorPickerDesc: "S\xE9lectionnez la couleur d'arri\xE8re-plan pour le surlignage",
  deleteColorTooltip: "Supprimer cette couleur",
  previewText: "Texte d'exemple",
  // Commands
  createDefaultHighlight: "Cr\xE9er un surlignage par d\xE9faut",
  removeHighlight: "Supprimer le surlignage",
  createColorHighlight: "Cr\xE9er un surlignage {color}",
  // Settings UI new
  documentation: "Documentation",
  documentationDesc: "Afficher la documentation compl\xE8te et les exemples d'utilisation",
  openReadme: "Ouvrir README",
  colorsSection: "Couleurs",
  enableHighlight: "Activer la mise en \xE9vidence",
  enableHighlightDesc: "Activer ou d\xE9sactiver la mise en \xE9vidence {color}",
  colorName: "Nom de la couleur",
  colorNameDescNew: 'Identificateur utilis\xE9 dans la syntaxe Markdown (par exemple, "blue" pour ==(blue)texte==)',
  displayName: "Nom d'affichage",
  displayNameDescNew: "Nom affich\xE9 dans les param\xE8tres",
  color: "Couleur",
  colorDescNew: "Cliquez sur les cercles de couleur pour changer la couleur de mise en \xE9vidence",
  remove: "Supprimer",
  removeConfirm: '\xCAtes-vous s\xFBr de vouloir supprimer "{colorName}"? Cette op\xE9ration ne peut \xEAtre annul\xE9e',
  supportSection: "Support",
  buyMeACoffee: "Buy me a coffee",
  buyMeACoffeeDesc: "Vous aimez ce plugin ? J'appr\xE9cierais vraiment si vous pouviez m'offrir un caf\xE9 pour alimenter le d\xE9veloppement futur ! \u2615"
};
var es = {
  // Plugin messages
  pluginLoaded: "\xA1Plugin Better Highlight cargado exitosamente!",
  pluginWorking: "\xA1El plugin Better Highlight est\xE1 funcionando correctamente!",
  // Highlight actions
  highlightRemoved: "Resaltado eliminado",
  highlightRemovedCount: "Resaltados eliminados ({count} elementos)",
  customHighlightRemoved: "Resaltado personalizado eliminado",
  noHighlightFound: "No se encontraron resaltados en la selecci\xF3n",
  noHighlightAtCursor: "No se encontr\xF3 resaltado en la posici\xF3n del cursor",
  // Settings UI
  settingsTitle: "Configuraci\xF3n de Better Highlight",
  addColorButton: "+ A\xF1adir color",
  addColorDesc: "A\xF1adir un color de resaltado personalizado",
  usageTitle: "Uso:",
  usageCustom: "Resaltado personalizado: <code>==(colorname)texto==</code>",
  usageNormal: "Resaltado normal: <code>==texto==</code>",
  hotkeyTitle: "Atajos de teclado:",
  hotkeyDesc: 'Ve a Configuraci\xF3n \u2192 Atajos de teclado \u2192 "Better Highlight" para establecer atajos para cada color',
  // Color settings
  enabledLabel: "Habilitado",
  enabledDesc: "Habilitar este color para uso",
  colorNameLabel: "Nombre del color",
  colorNameDesc: "Nombre usado en la sintaxis ==(colorname)text==",
  displayNameLabel: "Nombre de visualizaci\xF3n",
  displayNameDesc: "Nombre mostrado en la configuraci\xF3n",
  colorPickerLabel: "Color de resaltado",
  colorPickerDesc: "Selecciona el color de fondo para el resaltado",
  deleteColorTooltip: "Eliminar este color",
  previewText: "Texto de ejemplo",
  // Commands
  createDefaultHighlight: "Crear resaltado por defecto",
  removeHighlight: "Eliminar resaltado",
  createColorHighlight: "Crear resaltado {color}",
  // Settings UI new
  documentation: "Documentaci\xF3n",
  documentationDesc: "Mostrar documentaci\xF3n completa y ejemplos de uso",
  openReadme: "Abrir README",
  colorsSection: "Colores",
  enableHighlight: "Habilitar resaltado",
  enableHighlightDesc: "Habilitar o deshabilitar resaltado {color}",
  colorName: "Nombre del color",
  colorNameDescNew: 'Identificador usado en la sintaxis Markdown (por ejemplo, "blue" para ==(blue)texto==)',
  displayName: "Nombre de visualizaci\xF3n",
  displayNameDescNew: "Nombre mostrado en la configuraci\xF3n",
  color: "Color",
  colorDescNew: "Haga clic en los c\xEDrculos de color para cambiar el color de resaltado",
  remove: "Eliminar",
  removeConfirm: '\xBFEst\xE1 seguro de que desea eliminar "{colorName}"? Esta operaci\xF3n no se puede deshacer',
  supportSection: "Soporte",
  buyMeACoffee: "Buy me a coffee",
  buyMeACoffeeDesc: "\xBFTe gusta este plugin? \xA1Realmente apreciar\xEDa si pudieras invitarme a un caf\xE9 para impulsar el desarrollo futuro! \u2615"
};
var it = {
  // Plugin messages
  pluginLoaded: "Plugin Better Highlight caricato con successo!",
  pluginWorking: "Il plugin Better Highlight sta funzionando correttamente!",
  // Highlight actions
  highlightRemoved: "Evidenziazione rimossa",
  highlightRemovedCount: "Evidenziazioni rimosse ({count} elementi)",
  customHighlightRemoved: "Evidenziazione personalizzata rimossa",
  noHighlightFound: "Nessuna evidenziazione trovata nella selezione",
  noHighlightAtCursor: "Nessuna evidenziazione trovata alla posizione del cursore",
  // Settings UI
  settingsTitle: "Impostazioni Better Highlight",
  addColorButton: "+ Aggiungi colore",
  addColorDesc: "Aggiungi un colore di evidenziazione personalizzato",
  usageTitle: "Utilizzo:",
  usageCustom: "Evidenziazione personalizzata: <code>==(colorname)testo==</code>",
  usageNormal: "Evidenziazione normale: <code>==testo==</code>",
  hotkeyTitle: "Scorciatoie da tastiera:",
  hotkeyDesc: 'Vai su Impostazioni \u2192 Scorciatoie da tastiera \u2192 "Better Highlight" per impostare scorciatoie per ogni colore',
  // Color settings
  enabledLabel: "Abilitato",
  enabledDesc: "Abilita questo colore per l'uso",
  colorNameLabel: "Nome del colore",
  colorNameDesc: "Nome usato nella sintassi ==(colorname)text==",
  displayNameLabel: "Nome di visualizzazione",
  displayNameDesc: "Nome mostrato nelle impostazioni",
  colorPickerLabel: "Colore di evidenziazione",
  colorPickerDesc: "Seleziona il colore di sfondo per l'evidenziazione",
  deleteColorTooltip: "Elimina questo colore",
  previewText: "Testo di esempio",
  // Commands
  createDefaultHighlight: "Crea evidenziazione predefinita",
  removeHighlight: "Rimuovi evidenziazione",
  createColorHighlight: "Crea evidenziazione {color}",
  // Settings UI new
  documentation: "Documentazione",
  documentationDesc: "Mostrare la documentazione completa e gli esempi di utilizzo",
  openReadme: "Apri README",
  colorsSection: "Colori",
  enableHighlight: "Abilita evidenziazione",
  enableHighlightDesc: "Abilita o disabilita evidenziazione {color}",
  colorName: "Nome del colore",
  colorNameDescNew: 'Identificatore usato nella sintassi Markdown (ad esempio, "blue" per ==(blue)testo==)',
  displayName: "Nome di visualizzazione",
  displayNameDescNew: "Nome mostrato nelle impostazioni",
  color: "Colore",
  colorDescNew: "Fare clic sui cerchi di colore per cambiare il colore di evidenziazione",
  remove: "Rimuovere",
  removeConfirm: 'Sei sicuro di voler rimuovere "{colorName}"? Questa operazione non pu\xF2 essere annullata',
  supportSection: "Supporto",
  buyMeACoffee: "Buy me a coffee",
  buyMeACoffeeDesc: "Ti piace questo plugin? Apprezzerei davvero se potessi offrirmi un caff\xE8 per alimentare lo sviluppo futuro! \u2615"
};
var ru = {
  // Plugin messages
  pluginLoaded: "\u041F\u043B\u0430\u0433\u0438\u043D Better Highlight \u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043D!",
  pluginWorking: "\u041F\u043B\u0430\u0433\u0438\u043D Better Highlight \u0440\u0430\u0431\u043E\u0442\u0430\u0435\u0442 \u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u043E!",
  // Highlight actions
  highlightRemoved: "\u0412\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u0443\u0434\u0430\u043B\u0435\u043D\u043E",
  highlightRemovedCount: "\u0412\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u0439 \u0443\u0434\u0430\u043B\u0435\u043D\u043E ({count} \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432)",
  customHighlightRemoved: "\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u043E\u0435 \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u0443\u0434\u0430\u043B\u0435\u043D\u043E",
  noHighlightFound: "\u0412\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044F \u0432 \u0432\u044B\u0431\u0440\u0430\u043D\u043D\u043E\u0439 \u043E\u0431\u043B\u0430\u0441\u0442\u0438 \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u044B",
  noHighlightAtCursor: "\u0412\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u0432 \u043F\u043E\u0437\u0438\u0446\u0438\u0438 \u043A\u0443\u0440\u0441\u043E\u0440\u0430 \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u043E",
  // Settings UI
  settingsTitle: "\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438 Better Highlight",
  addColorButton: "+ \u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0446\u0432\u0435\u0442",
  addColorDesc: "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u0438\u0439 \u0446\u0432\u0435\u0442 \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044F",
  usageTitle: "\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435:",
  usageCustom: "\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u043E\u0435 \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u0435: <code>==(colorname)\u0442\u0435\u043A\u0441\u0442==</code>",
  usageNormal: "\u041E\u0431\u044B\u0447\u043D\u043E\u0435 \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u0435: <code>==\u0442\u0435\u043A\u0441\u0442==</code>",
  hotkeyTitle: "\u0413\u043E\u0440\u044F\u0447\u0438\u0435 \u043A\u043B\u0430\u0432\u0438\u0448\u0438:",
  hotkeyDesc: '\u041F\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u0432 \u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438 \u2192 \u0413\u043E\u0440\u044F\u0447\u0438\u0435 \u043A\u043B\u0430\u0432\u0438\u0448\u0438 \u2192 "Better Highlight" \u0434\u043B\u044F \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438 \u0433\u043E\u0440\u044F\u0447\u0438\u0445 \u043A\u043B\u0430\u0432\u0438\u0448 \u0434\u043B\u044F \u043A\u0430\u0436\u0434\u043E\u0433\u043E \u0446\u0432\u0435\u0442\u0430',
  // Color settings
  enabledLabel: "\u0412\u043A\u043B\u044E\u0447\u0435\u043D\u043E",
  enabledDesc: "\u0412\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u044D\u0442\u043E\u0442 \u0446\u0432\u0435\u0442 \u0434\u043B\u044F \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F",
  colorNameLabel: "\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435 \u0446\u0432\u0435\u0442\u0430",
  colorNameDesc: "\u0418\u043C\u044F, \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u043C\u043E\u0435 \u0432 \u0441\u0438\u043D\u0442\u0430\u043A\u0441\u0438\u0441\u0435 ==(colorname)text==",
  displayNameLabel: "\u041E\u0442\u043E\u0431\u0440\u0430\u0436\u0430\u0435\u043C\u043E\u0435 \u0438\u043C\u044F",
  displayNameDesc: "\u0418\u043C\u044F, \u043F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0435\u043C\u043E\u0435 \u0432 \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0430\u0445",
  colorPickerLabel: "\u0426\u0432\u0435\u0442 \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044F",
  colorPickerDesc: "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0446\u0432\u0435\u0442 \u0444\u043E\u043D\u0430 \u0434\u043B\u044F \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044F",
  deleteColorTooltip: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u044D\u0442\u043E\u0442 \u0446\u0432\u0435\u0442",
  previewText: "\u041F\u0440\u0438\u043C\u0435\u0440 \u0442\u0435\u043A\u0441\u0442\u0430",
  // Commands
  createDefaultHighlight: "\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u043F\u043E \u0443\u043C\u043E\u043B\u0447\u0430\u043D\u0438\u044E",
  removeHighlight: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u0435",
  createColorHighlight: "\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u0435 {color}",
  // Settings UI new
  documentation: "\u0414\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430\u0446\u0438\u044F",
  documentationDesc: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u043F\u043E\u043B\u043D\u0443\u044E \u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430\u0446\u0438\u044E \u0438 \u043F\u0440\u0438\u043C\u0435\u0440\u044B \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F",
  openReadme: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C README",
  colorsSection: "\u0426\u0432\u0435\u0442\u0430",
  enableHighlight: "\u0412\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u0435",
  enableHighlightDesc: "\u0412\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0438\u043B\u0438 \u0432\u044B\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u0435 {color}",
  colorName: "\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435 \u0446\u0432\u0435\u0442\u0430",
  colorNameDescNew: '\u0418\u0434\u0435\u043D\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0440, \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u043C\u044B\u0439 \u0432 \u0441\u0438\u043D\u0442\u0430\u043A\u0441\u0438\u0441\u0435 Markdown (\u043D\u0430\u043F\u0440\u0438\u043C\u0435\u0440, "blue" \u0434\u043B\u044F ==(blue)\u0442\u0435\u043A\u0441\u0442==)',
  displayName: "\u041E\u0442\u043E\u0431\u0440\u0430\u0436\u0430\u0435\u043C\u043E\u0435 \u0438\u043C\u044F",
  displayNameDescNew: "\u0418\u043C\u044F, \u043F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0435\u043C\u043E\u0435 \u0432 \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0430\u0445",
  color: "\u0426\u0432\u0435\u0442",
  colorDescNew: "\u041D\u0430\u0436\u043C\u0438\u0442\u0435 \u043D\u0430 \u043A\u0440\u0443\u0433\u0438 \u0446\u0432\u0435\u0442\u043E\u0432, \u0447\u0442\u043E\u0431\u044B \u0438\u0437\u043C\u0435\u043D\u0438\u0442\u044C \u0446\u0432\u0435\u0442 \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044F",
  remove: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C",
  removeConfirm: '\u0412\u044B \u0443\u0432\u0435\u0440\u0435\u043D\u044B, \u0447\u0442\u043E \u0445\u043E\u0442\u0438\u0442\u0435 \u0443\u0434\u0430\u043B\u0438\u0442\u044C "{colorName}"? \u042D\u0442\u043E \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043D\u0435\u043B\u044C\u0437\u044F \u043E\u0442\u043C\u0435\u043D\u0438\u0442\u044C',
  supportSection: "\u041F\u043E\u0434\u0434\u0435\u0440\u0436\u043A\u0430",
  buyMeACoffee: "Buy me a coffee",
  buyMeACoffeeDesc: "\u041D\u0440\u0430\u0432\u0438\u0442\u0441\u044F \u044D\u0442\u043E\u0442 \u043F\u043B\u0430\u0433\u0438\u043D? \u042F \u0431\u044B\u043B \u0431\u044B \u043E\u0447\u0435\u043D\u044C \u043F\u0440\u0438\u0437\u043D\u0430\u0442\u0435\u043B\u0435\u043D, \u0435\u0441\u043B\u0438 \u0431\u044B \u0432\u044B \u0443\u0433\u043E\u0441\u0442\u0438\u043B\u0438 \u043C\u0435\u043D\u044F \u043A\u043E\u0444\u0435 \u0434\u043B\u044F \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u043A\u0438 \u0431\u0443\u0434\u0443\u0449\u0435\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043E\u0442\u043A\u0438! \u2615"
};
var languages = {
  en,
  ja,
  "zh-cn": zhCN,
  "zh-tw": zhTW,
  ko,
  de,
  fr,
  es,
  it,
  ru
};
var I18n = class {
  constructor() {
    this.currentLanguage = "en";
    this.setLanguage();
  }
  /**
   * 言語を自動設定
   */
  setLanguage() {
    var _a, _b;
    const obsidianLang = ((_b = (_a = window.moment) == null ? void 0 : _a.locale) == null ? void 0 : _b.call(_a)) || "en";
    if (obsidianLang.startsWith("ja")) {
      this.currentLanguage = "ja";
    } else if (obsidianLang.startsWith("zh-cn") || obsidianLang.startsWith("zh_CN")) {
      this.currentLanguage = "zh-cn";
    } else if (obsidianLang.startsWith("zh-tw") || obsidianLang.startsWith("zh_TW")) {
      this.currentLanguage = "zh-tw";
    } else if (obsidianLang.startsWith("ko")) {
      this.currentLanguage = "ko";
    } else if (obsidianLang.startsWith("de")) {
      this.currentLanguage = "de";
    } else if (obsidianLang.startsWith("fr")) {
      this.currentLanguage = "fr";
    } else if (obsidianLang.startsWith("es")) {
      this.currentLanguage = "es";
    } else if (obsidianLang.startsWith("it")) {
      this.currentLanguage = "it";
    } else if (obsidianLang.startsWith("ru")) {
      this.currentLanguage = "ru";
    } else {
      this.currentLanguage = "en";
    }
    console.log(`Better Highlight: Language auto-detected as ${this.currentLanguage} (from ${obsidianLang})`);
  }
  /**
   * 翻訳を取得
   */
  t(key, params) {
    const strings = languages[this.currentLanguage] || languages.en;
    let text = strings[key] || languages.en[key] || key;
    if (params) {
      Object.entries(params).forEach(([param, value]) => {
        text = text.replace(`{${param}}`, String(value));
      });
    }
    return text;
  }
  /**
   * 現在の言語を取得
   */
  getCurrentLanguage() {
    return this.currentLanguage;
  }
};

// src/main.ts
var import_view = require("@codemirror/view");
var import_state = require("@codemirror/state");
var BetterHighlightPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.i18n = new I18n();
    new import_obsidian.Notice(this.i18n.t("pluginLoaded"));
    this.addStyles();
    this.registerEditorExtension(this.createEditorExtension());
    this.setupMarkdownPostProcessor();
    this.registerCommands();
    this.addSettingTab(new BetterHighlightSettingTab(this.app, this));
  }
  onunload() {
    const existingStyle = document.getElementById("better-highlight-styles");
    if (existingStyle) {
      existingStyle.remove();
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.addStyles();
    this.registerCommands();
  }
  registerCommands() {
    this.app.commands.removeCommand(`${this.manifest.id}:create-default-highlight`);
    this.app.commands.removeCommand(`${this.manifest.id}:remove-highlight`);
    this.settings.colors.forEach((color) => {
      this.app.commands.removeCommand(`${this.manifest.id}:highlight-${color.id}`);
    });
    this.addCommand({
      id: "create-default-highlight",
      name: this.i18n.t("createDefaultHighlight"),
      editorCallback: (editor) => {
        this.createHighlight(editor);
      }
    });
    this.addCommand({
      id: "remove-highlight",
      name: this.i18n.t("removeHighlight"),
      editorCallback: (editor) => {
        this.removeHighlight(editor);
      }
    });
    this.settings.colors.forEach((color) => {
      if (color.enabled) {
        this.addCommand({
          id: `highlight-${color.id}`,
          name: this.i18n.t("createColorHighlight", { color: this.getColorDisplayName(color) }),
          editorCallback: (editor) => {
            this.createHighlight(editor, color);
          }
        });
      }
    });
  }
  createHighlight(editor, color) {
    const selection = editor.getSelection();
    if (!selection) {
      return;
    }
    let replacement;
    if (color) {
      replacement = `==(${color.name})${selection}==`;
    } else {
      replacement = `==${selection}==`;
    }
    editor.replaceSelection(replacement);
  }
  removeHighlight(editor) {
    const selection = editor.getSelection();
    if (selection) {
      this.removeHighlightFromSelection(editor, selection);
    } else {
      this.removeHighlightAtCursor(editor);
    }
  }
  removeHighlightFromSelection(editor, selection) {
    const selectionFrom = editor.getCursor("from");
    const selectionTo = editor.getCursor("to");
    let foundHighlight = false;
    let removedCount = 0;
    const fullText = editor.getValue();
    const lines = fullText.split("\n");
    for (let lineNum = selectionFrom.line; lineNum <= selectionTo.line; lineNum++) {
      const line = lines[lineNum];
      const lineSelectionStart = lineNum === selectionFrom.line ? selectionFrom.ch : 0;
      const lineSelectionEnd = lineNum === selectionTo.line ? selectionTo.ch : line.length;
      const customHighlightRegex = /==\([^)]+\)([^=]+)==/g;
      const normalHighlightRegex = /==([^=]+)==/g;
      let match;
      let newLine = line;
      let lineChanged = false;
      customHighlightRegex.lastIndex = 0;
      while ((match = customHighlightRegex.exec(line)) !== null) {
        const matchStart = match.index;
        const matchEnd = match.index + match[0].length;
        const overlaps = !(lineSelectionEnd <= matchStart || lineSelectionStart >= matchEnd);
        if (overlaps) {
          const content = match[1];
          const beforeMatch = newLine.substring(0, matchStart);
          const afterMatch = newLine.substring(matchEnd);
          newLine = beforeMatch + content + afterMatch;
          lineChanged = true;
          foundHighlight = true;
          removedCount++;
          break;
        }
      }
      if (!lineChanged) {
        normalHighlightRegex.lastIndex = 0;
        while ((match = normalHighlightRegex.exec(line)) !== null) {
          const matchStart = match.index;
          const matchEnd = match.index + match[0].length;
          const overlaps = !(lineSelectionEnd <= matchStart || lineSelectionStart >= matchEnd);
          if (overlaps) {
            const content = match[1];
            const beforeMatch = newLine.substring(0, matchStart);
            const afterMatch = newLine.substring(matchEnd);
            newLine = beforeMatch + content + afterMatch;
            lineChanged = true;
            foundHighlight = true;
            removedCount++;
            break;
          }
        }
      }
      if (lineChanged) {
        lines[lineNum] = newLine;
      }
    }
    if (foundHighlight) {
      const newText = lines.join("\n");
      editor.setValue(newText);
      editor.setSelection(selectionFrom, selectionTo);
      new import_obsidian.Notice(this.i18n.t("highlightRemovedCount", { count: removedCount }));
    } else {
      new import_obsidian.Notice(this.i18n.t("noHighlightFound"));
    }
  }
  removeHighlightAtCursor(editor) {
    const cursor = editor.getCursor();
    const line = editor.getLine(cursor.line);
    const cursorPos = cursor.ch;
    const customHighlightRegex = /==\([^)]+\)([^=]+)==/g;
    const normalHighlightRegex = /==([^=]+)==/g;
    let match;
    let foundHighlight = false;
    customHighlightRegex.lastIndex = 0;
    while ((match = customHighlightRegex.exec(line)) !== null) {
      const matchStart = match.index;
      const matchEnd = match.index + match[0].length;
      if (cursorPos >= matchStart && cursorPos <= matchEnd) {
        const beforeMatch = line.substring(0, matchStart);
        const afterMatch = line.substring(matchEnd);
        const content = match[1];
        const newLine = beforeMatch + content + afterMatch;
        editor.setLine(cursor.line, newLine);
        const removedChars = match[0].length - content.length;
        const newCursorPos = Math.max(0, cursorPos - (cursorPos > matchStart + content.length ? removedChars : 0));
        editor.setCursor(cursor.line, newCursorPos);
        new import_obsidian.Notice(this.i18n.t("customHighlightRemoved"));
        foundHighlight = true;
        break;
      }
    }
    if (!foundHighlight) {
      normalHighlightRegex.lastIndex = 0;
      while ((match = normalHighlightRegex.exec(line)) !== null) {
        const matchStart = match.index;
        const matchEnd = match.index + match[0].length;
        if (cursorPos >= matchStart && cursorPos <= matchEnd) {
          const beforeMatch = line.substring(0, matchStart);
          const afterMatch = line.substring(matchEnd);
          const content = match[1];
          const newLine = beforeMatch + content + afterMatch;
          editor.setLine(cursor.line, newLine);
          const removedChars = match[0].length - content.length;
          const newCursorPos = Math.max(0, cursorPos - (cursorPos > matchStart + content.length ? removedChars : 0));
          editor.setCursor(cursor.line, newCursorPos);
          new import_obsidian.Notice(this.i18n.t("highlightRemoved"));
          foundHighlight = true;
          break;
        }
      }
    }
    if (!foundHighlight) {
      new import_obsidian.Notice(this.i18n.t("noHighlightAtCursor"));
    }
  }
  addStyles() {
    const existingStyle = document.getElementById("better-highlight-styles");
    if (existingStyle) {
      existingStyle.remove();
    }
    const style = document.createElement("style");
    style.id = "better-highlight-styles";
    let css = `
/* Better Highlight Plugin Styles */

/* \u30C7\u30D5\u30A9\u30EB\u30C8\u30CF\u30A4\u30E9\u30A4\u30C8\uFF08\u5909\u66F4\u306A\u3057\uFF09 */
mark, .cm-highlight {
	background-color: #ffeb3b;
	color: inherit;
}

/* \u30AB\u30B9\u30BF\u30E0\u30AB\u30E9\u30FC\u30CF\u30A4\u30E9\u30A4\u30C8 - \u6A19\u6E96\u30CF\u30A4\u30E9\u30A4\u30C8\u3068\u540C\u3058\u30B9\u30BF\u30A4\u30EB */
.better-highlight-processed {
	font-style: normal !important;
	font-weight: normal !important;
	background: transparent !important;
	border: none !important;
	padding: 0 !important;
	margin: 0 !important;
	text-decoration: none !important;
}

/* \u8A2D\u5B9A\u753B\u9762\u306E\u30B9\u30BF\u30A4\u30EB */
.better-highlight-color-setting {
	border: 1px solid var(--background-modifier-border);
	border-radius: 8px;
	padding: 16px;
	margin-bottom: 16px;
	background: var(--background-secondary);
}

.color-setting-header {
	margin-bottom: 12px;
	padding-bottom: 0px;
}

/* \u30AB\u30E9\u30FC\u30D4\u30C3\u30AB\u30FC\u306Ehover\u6642outline\u4FEE\u6B63 */
input[type="color"] {
	outline: none !important;
	box-shadow: none !important;
}

input[type="color"]:focus,
input[type="color"]:hover {
	outline: none !important;
	box-shadow: none !important;
}

/* \u3088\u308A\u5177\u4F53\u7684\u306A\u30BB\u30EC\u30AF\u30BF\u30FC\u3067Obsidian\u306E\u30C7\u30D5\u30A9\u30EB\u30C8\u30B9\u30BF\u30A4\u30EB\u3092\u4E0A\u66F8\u304D */
.setting-item input[type="color"],
.mod-settings input[type="color"] {
	outline: none !important;
	border: none !important;
	box-shadow: none !important;
}

.setting-item input[type="color"]:focus,
.setting-item input[type="color"]:hover,
.mod-settings input[type="color"]:focus,
.mod-settings input[type="color"]:hover {
	outline: none !important;
	border: none !important;
	box-shadow: none !important;
}

`;
    this.settings.colors.forEach((color) => {
      if (color.enabled) {
        css += `
/* ${color.displayName}\u30CF\u30A4\u30E9\u30A4\u30C8 */
span.better-highlight-${color.id}.better-highlight-processed,
.better-highlight-${color.id} {
	background: linear-gradient(to bottom, transparent 0%, transparent 60%, ${color.color} 60%, ${color.color} 100%) !important;
	color: inherit !important;
	font-style: inherit !important;
	font-weight: inherit !important;
	text-decoration: inherit !important;
	border: none !important;
	padding: 0 !important;
	margin: 0 !important;
	display: inline !important;
	box-shadow: none !important;
	outline: none !important;
}
`;
      }
    });
    css += `
/* PDF Export Support - Print Media Styles */
@media print {
	/* \u30C7\u30D5\u30A9\u30EB\u30C8\u30CF\u30A4\u30E9\u30A4\u30C8\uFF08PDF\u3067\u3082\u7DAD\u6301\uFF09 */
	mark, .cm-highlight {
		background-color: #ffeb3b !important;
		color: inherit !important;
		-webkit-print-color-adjust: exact !important;
		print-color-adjust: exact !important;
	}

	/* \u30AB\u30B9\u30BF\u30E0\u30CF\u30A4\u30E9\u30A4\u30C8\uFF08PDF\u3067\u3082\u7DAD\u6301\uFF09 */
	.better-highlight-processed {
		-webkit-print-color-adjust: exact !important;
		print-color-adjust: exact !important;
	}

`;
    this.settings.colors.forEach((color) => {
      if (color.enabled) {
        css += `
	/* ${color.displayName}\u30CF\u30A4\u30E9\u30A4\u30C8 - PDF\u5BFE\u5FDC */
	span.better-highlight-${color.id}.better-highlight-processed,
	.better-highlight-${color.id} {
		background: linear-gradient(to bottom, transparent 0%, transparent 60%, ${color.color} 60%, ${color.color} 100%) !important;
		color: inherit !important;
		-webkit-print-color-adjust: exact !important;
		print-color-adjust: exact !important;
	}
`;
      }
    });
    css += `
}

/* PDF Viewer Support - for Obsidian PDF embeds and native PDF viewer */
.pdf-embed .better-highlight-processed,
.pdf-viewer .better-highlight-processed,
[data-type="pdf"] .better-highlight-processed {
	-webkit-print-color-adjust: exact !important;
	print-color-adjust: exact !important;
}
`;
    this.settings.colors.forEach((color) => {
      if (color.enabled) {
        css += `
/* ${color.displayName}\u30CF\u30A4\u30E9\u30A4\u30C8 - PDF\u30D3\u30E5\u30FC\u30A2\u5BFE\u5FDC */
.pdf-embed span.better-highlight-${color.id}.better-highlight-processed,
.pdf-embed .better-highlight-${color.id},
.pdf-viewer span.better-highlight-${color.id}.better-highlight-processed,
.pdf-viewer .better-highlight-${color.id},
[data-type="pdf"] span.better-highlight-${color.id}.better-highlight-processed,
[data-type="pdf"] .better-highlight-${color.id} {
	background: linear-gradient(to bottom, transparent 0%, transparent 60%, ${color.color} 60%, ${color.color} 100%) !important;
	color: inherit !important;
	-webkit-print-color-adjust: exact !important;
	print-color-adjust: exact !important;
}
`;
      }
    });
    style.textContent = css;
    document.head.appendChild(style);
  }
  setupMarkdownPostProcessor() {
    this.registerMarkdownPostProcessor((element, context) => {
      this.processElementForReading(element);
    });
  }
  processElementForReading(element) {
    const isPdfContext = element.closest(".pdf-embed") !== null || element.closest(".pdf-viewer") !== null || element.closest('[data-type="pdf"]') !== null || document.body.classList.contains("pdf-view");
    const markElements = element.querySelectorAll("mark");
    markElements.forEach((markElement) => {
      var _a;
      const text = markElement.textContent || "";
      const match = text.match(/^\(([^)]+)\)(.+)$/);
      if (match) {
        const colorName = match[1];
        const content = match[2];
        const color = this.settings.colors.find((c) => c.name === colorName);
        if (color && color.enabled) {
          const newSpan = document.createElement("span");
          newSpan.className = `better-highlight-${color.id} better-highlight-processed`;
          const additionalStyles = isPdfContext ? "; -webkit-print-color-adjust: exact !important; print-color-adjust: exact !important" : "";
          newSpan.style.cssText = `background: linear-gradient(to bottom, transparent 0%, transparent 60%, ${color.color} 60%, ${color.color} 100%) !important${additionalStyles}`;
          newSpan.textContent = content;
          (_a = markElement.parentElement) == null ? void 0 : _a.replaceChild(newSpan, markElement);
        } else {
          markElement.style.cssText = `background: linear-gradient(to bottom, transparent 0%, transparent 60%, #ffeb3b 60%, #ffeb3b 100%) !important`;
          markElement.textContent = content;
        }
      }
    });
    let html = element.innerHTML;
    const obsidianConvertedRegex = /<mark>=\(([^)]+)\)([^<]+)<\/mark>=/g;
    let hasChanges = false;
    html = html.replace(obsidianConvertedRegex, (match, colorName, content) => {
      const color = this.settings.colors.find((c) => c.name === colorName);
      if (color && color.enabled) {
        hasChanges = true;
        const additionalStyles = isPdfContext ? "; -webkit-print-color-adjust: exact !important; print-color-adjust: exact !important" : "";
        return `<span class="better-highlight-${color.id} better-highlight-processed" style="background: linear-gradient(to bottom, transparent 0%, transparent 60%, ${color.color} 60%, ${color.color} 100%) !important${additionalStyles}">${content}</span>`;
      } else {
        hasChanges = true;
        const additionalStyles = isPdfContext ? "; -webkit-print-color-adjust: exact !important; print-color-adjust: exact !important" : "";
        return `<span style="background: linear-gradient(to bottom, transparent 0%, transparent 60%, #ffeb3b 60%, #ffeb3b 100%) !important${additionalStyles}">${content}</span>`;
      }
    });
    const originalRegex = /==\(([^)]+)\)([^=]+)==/g;
    html = html.replace(originalRegex, (match, colorName, content) => {
      const color = this.settings.colors.find((c) => c.name === colorName);
      if (color && color.enabled) {
        hasChanges = true;
        const additionalStyles = isPdfContext ? "; -webkit-print-color-adjust: exact !important; print-color-adjust: exact !important" : "";
        return `<span class="better-highlight-${color.id} better-highlight-processed" style="background: linear-gradient(to bottom, transparent 0%, transparent 60%, ${color.color} 60%, ${color.color} 100%) !important${additionalStyles}">${content}</span>`;
      } else {
        hasChanges = true;
        const additionalStyles = isPdfContext ? "; -webkit-print-color-adjust: exact !important; print-color-adjust: exact !important" : "";
        return `<span style="background: linear-gradient(to bottom, transparent 0%, transparent 60%, #ffeb3b 60%, #ffeb3b 100%) !important${additionalStyles}">${content}</span>`;
      }
    });
    if (hasChanges) {
      element.innerHTML = html;
    }
  }
  createEditorExtension() {
    const plugin = this;
    return [
      // マウスイベントハンドラーを追加
      import_view.EditorView.domEventHandlers({
        mousedown: (event, view) => {
          view._betterHighlightDragging = true;
          return false;
        },
        mouseup: (event, view) => {
          if (view._betterHighlightDragging) {
            view._betterHighlightDragging = false;
            setTimeout(() => {
              view.requestMeasure();
            }, 1);
          }
          return false;
        }
      }),
      import_view.ViewPlugin.fromClass(class {
        constructor(view) {
          this.decorations = this.buildDecorations(view);
        }
        update(update) {
          if (update.docChanged || update.viewportChanged || update.selectionSet) {
            this.decorations = this.buildDecorations(update.view);
          }
        }
        buildDecorations(view) {
          const builder = new import_state.RangeSetBuilder();
          const text = view.state.doc.toString();
          const selection = view.state.selection.main;
          const cursorPos = selection.head;
          const selectionFrom = selection.from;
          const selectionTo = selection.to;
          const hasSelection = selectionFrom !== selectionTo;
          const isDragging = view._betterHighlightDragging || false;
          const regex = /==\(([^)]+)\)([^=]+)==/g;
          let match;
          while ((match = regex.exec(text)) !== null) {
            const colorName = match[1];
            const content = match[2];
            const fullMatch = match[0];
            const from = match.index;
            const to = match.index + fullMatch.length;
            const color = plugin.settings.colors.find((c) => c.name === colorName);
            if (color && color.enabled) {
              const cursorInRange = cursorPos >= from && cursorPos <= to;
              const selectionOverlaps = hasSelection && !isDragging && !(selectionTo <= from || selectionFrom >= to);
              const shouldShowSyntax = !isDragging && (cursorInRange || selectionOverlaps);
              if (shouldShowSyntax) {
                builder.add(from, to, import_view.Decoration.mark({
                  class: `better-highlight-${color.id}`
                }));
              } else {
                const openMarkupStart = from;
                const openMarkupEnd = from + `==(${colorName})`.length;
                const contentStart = openMarkupEnd;
                const contentEnd = to - 2;
                const closeMarkupStart = contentEnd;
                const closeMarkupEnd = to;
                builder.add(openMarkupStart, openMarkupEnd, import_view.Decoration.replace({}));
                builder.add(contentStart, contentEnd, import_view.Decoration.mark({
                  class: `better-highlight-${color.id}`
                }));
                builder.add(closeMarkupStart, closeMarkupEnd, import_view.Decoration.replace({}));
              }
            }
          }
          return builder.finish();
        }
      }, {
        decorations: (plugin2) => plugin2.decorations
      })
    ];
  }
  getColorDisplayName(color) {
    var _a;
    const colorNames = {
      yellow: { en: "Yellow", ja: "\u9EC4\u8272", "zh-cn": "\u9EC4\u8272", "zh-tw": "\u9EC3\u8272", ko: "\uB178\uB780\uC0C9", de: "Gelb", fr: "Jaune", es: "Amarillo", it: "Giallo", ru: "\u0416\u0451\u043B\u0442\u044B\u0439" },
      blue: { en: "Blue", ja: "\u9752", "zh-cn": "\u84DD\u8272", "zh-tw": "\u85CD\u8272", ko: "\uD30C\uB780\uC0C9", de: "Blau", fr: "Bleu", es: "Azul", it: "Blu", ru: "\u0421\u0438\u043D\u0438\u0439" },
      green: { en: "Green", ja: "\u7DD1", "zh-cn": "\u7EFF\u8272", "zh-tw": "\u7DA0\u8272", ko: "\uCD08\uB85D\uC0C9", de: "Gr\xFCn", fr: "Vert", es: "Verde", it: "Verde", ru: "\u0417\u0435\u043B\u0451\u043D\u044B\u0439" },
      red: { en: "Red", ja: "\u8D64", "zh-cn": "\u7EA2\u8272", "zh-tw": "\u7D05\u8272", ko: "\uBE68\uAC04\uC0C9", de: "Rot", fr: "Rouge", es: "Rojo", it: "Rosso", ru: "\u041A\u0440\u0430\u0441\u043D\u044B\u0439" },
      purple: { en: "Purple", ja: "\u7D2B", "zh-cn": "\u7D2B\u8272", "zh-tw": "\u7D2B\u8272", ko: "\uBCF4\uB77C\uC0C9", de: "Lila", fr: "Violet", es: "Morado", it: "Viola", ru: "\u0424\u0438\u043E\u043B\u0435\u0442\u043E\u0432\u044B\u0439" }
    };
    const currentLang = this.i18n.getCurrentLanguage();
    const translatedName = (_a = colorNames[color.name]) == null ? void 0 : _a[currentLang];
    return translatedName || color.displayName || color.name;
  }
};
var BetterHighlightSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName(this.plugin.i18n.t("documentation")).setDesc(this.plugin.i18n.t("documentationDesc")).addButton((button) => button.setButtonText(this.plugin.i18n.t("openReadme")).onClick(() => {
      window.open("https://github.com/edacchi-chonmage/better-highlight#better-highlight-plugin-for-obsidian", "_blank");
    }));
    new import_obsidian.Setting(containerEl).setName(this.plugin.i18n.t("addColorButton")).setDesc(this.plugin.i18n.t("addColorDesc")).addButton((button) => button.setButtonText(this.plugin.i18n.t("addColorButton")).setCta().onClick(async () => {
      const newId = `color-${Date.now()}`;
      const newColor = {
        id: newId,
        name: `color${this.plugin.settings.colors.length + 1}`,
        displayName: `Color ${this.plugin.settings.colors.length + 1}`,
        color: "#ff9800",
        enabled: true
      };
      this.plugin.settings.colors.push(newColor);
      await this.plugin.saveSettings();
      this.display();
    }));
    if (this.plugin.settings.colors.length > 0) {
      containerEl.createEl("h3", { text: this.plugin.i18n.t("colorsSection") });
    }
    this.plugin.settings.colors.forEach((color, index) => {
      const headerEl = containerEl.createEl("h4", { text: `${this.plugin.getColorDisplayName(color)}` });
      headerEl.setAttribute("data-color-index", index.toString());
      new import_obsidian.Setting(containerEl).setName(this.plugin.i18n.t("enableHighlight")).setDesc(this.plugin.i18n.t("enableHighlightDesc", { color: this.plugin.getColorDisplayName(color) })).addToggle((toggle) => toggle.setValue(color.enabled).onChange(async (value) => {
        this.plugin.settings.colors[index].enabled = value;
        await this.plugin.saveSettings();
        this.display();
      })).addButton((button) => button.setButtonText(this.plugin.i18n.t("remove")).setWarning().onClick(async () => {
        const confirmed = confirm(this.plugin.i18n.t("removeConfirm", { colorName: this.plugin.getColorDisplayName(color) }));
        if (confirmed) {
          this.plugin.settings.colors.splice(index, 1);
          await this.plugin.saveSettings();
          this.display();
        }
      }));
      if (color.enabled) {
        new import_obsidian.Setting(containerEl).setName(this.plugin.i18n.t("colorName")).setDesc(this.plugin.i18n.t("colorNameDescNew")).addText((text) => text.setPlaceholder("blue").setValue(color.name).onChange(async (value) => {
          this.plugin.settings.colors[index].name = value;
          await this.plugin.saveSettings();
        }));
        new import_obsidian.Setting(containerEl).setName(this.plugin.i18n.t("displayName")).setDesc(this.plugin.i18n.t("displayNameDescNew")).addText((text) => text.setPlaceholder("Blue").setValue(color.displayName).onChange(async (value) => {
          this.plugin.settings.colors[index].displayName = value;
          await this.plugin.saveSettings();
          const headerToUpdate = containerEl.querySelector(`h4[data-color-index="${index}"]`);
          if (headerToUpdate) {
            headerToUpdate.textContent = this.plugin.getColorDisplayName(this.plugin.settings.colors[index]);
          }
        }));
        new import_obsidian.Setting(containerEl).setName(this.plugin.i18n.t("color")).setDesc(this.plugin.i18n.t("colorDescNew")).addColorPicker((colorPicker) => colorPicker.setValue(color.color).onChange(async (value) => {
          this.plugin.settings.colors[index].color = value;
          await this.plugin.saveSettings();
        }));
      }
      if (index < this.plugin.settings.colors.length - 1) {
        containerEl.createEl("hr", { attr: { style: "margin: 24px 0 16px 0; border: none; border-top: 1px solid var(--background-modifier-border);" } });
      }
    });
    containerEl.createEl("h3", { text: this.plugin.i18n.t("supportSection") });
    const supportSetting = new import_obsidian.Setting(containerEl).setDesc(this.plugin.i18n.t("buyMeACoffeeDesc"));
    const supportContainer = supportSetting.controlEl.createDiv();
    const link = supportContainer.createEl("a", {
      href: "https://www.buymeacoffee.com/edacchi_chonmage"
    });
    link.style.display = "inline-block";
    const img = link.createEl("img", {
      attr: {
        src: "https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png",
        alt: "Buy Me A Coffee",
        style: "height: 40px; width: auto; border-radius: 8px;"
      }
    });
    link.addEventListener("click", (e) => {
      e.preventDefault();
      window.open("https://www.buymeacoffee.com/edacchi_chonmage", "_blank");
    });
  }
};
